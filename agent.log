2024-12-15 16:36:34,919 INFO - KUBECONFIG in use: None (Resolved Path: C:\Users\Sanket Chaudhary\.kube\config)
2024-12-15 16:36:34,919 INFO - Kubernetes configuration initialized successfully.
2024-12-15 16:36:35,487 INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://10.0.0.113:8000
2024-12-15 16:36:35,487 INFO - [33mPress CTRL+C to quit[0m
2024-12-15 16:36:43,313 INFO - Received query: How many pods are in the cluster?
2024-12-15 16:36:43,324 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:36:43,324 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"How many pods are in the cluster?\\"\\n        "}]}' message='Post details'
2024-12-15 16:36:45,410 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1634 request_id=req_93fc809efb0045469ec60b2a65cf761a response_code=200
2024-12-15 16:36:45,414 INFO - GPT-4 Response: Result: {
            "intents": {"pods": true, "namespace": false, "status": false, "deployments": false, "logs": false},
            "keywords": ["pods", "cluster"]
        }
2024-12-15 16:36:45,414 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:36:45,414 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:36:45,414 INFO - 127.0.0.1 - - [15/Dec/2024 16:36:45] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:36:45,423 INFO - Received query: What is the mount path of the persistent volume for the harbor database?
2024-12-15 16:36:45,423 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:36:45,423 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"What is the mount path of the persistent volume for the harbor database?\\"\\n        "}]}' message='Post details'
2024-12-15 16:36:48,651 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2980 request_id=req_38f626d8a74b981f6e5824aa39accd11 response_code=200
2024-12-15 16:36:48,652 INFO - GPT-4 Response: Result: {
            "intents": {"pods": false, "namespace": false, "status": false, "deployments": false, "logs": false},
            "keywords": ["mount path", "persistent volume", "harbor database"]
        }
2024-12-15 16:36:48,652 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:36:48,652 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:36:48,653 INFO - 127.0.0.1 - - [15/Dec/2024 16:36:48] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:36:48,657 INFO - Received query: Which pod(s) associate with the harbor database secret
2024-12-15 16:36:48,658 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:36:48,658 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"Which pod(s) associate with the harbor database secret\\"\\n        "}]}' message='Post details'
2024-12-15 16:36:50,309 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1344 request_id=req_d12bd61d5d68163ea3e9104e4b25edb7 response_code=200
2024-12-15 16:36:50,309 INFO - GPT-4 Response: Result: 
{
    "intents": {"pods": true, "namespace": false, "status": false, "deployments": false, "logs": false},
    "keywords": ["pod(s)", "harbor database secret"]
}
2024-12-15 16:36:50,310 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:36:50,310 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:36:50,310 INFO - 127.0.0.1 - - [15/Dec/2024 16:36:50] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:36:50,313 INFO - Received query: Which port will the harbor redis svc route traffic to?
2024-12-15 16:36:50,313 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:36:50,313 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"Which port will the harbor redis svc route traffic to?\\"\\n        "}]}' message='Post details'
2024-12-15 16:37:06,684 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=16210 request_id=req_1e9040813607d712757c4cedc4ffdcca response_code=200
2024-12-15 16:37:06,684 INFO - GPT-4 Response: Result: {
            "intents": {"pods": false, "namespace": false, "status": false, "deployments": false, "logs": false},
            "keywords": ["port", "harbor redis svc", "traffic"]
        }
2024-12-15 16:37:06,684 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:37:06,684 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:37:06,684 INFO - 127.0.0.1 - - [15/Dec/2024 16:37:06] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:37:06,688 INFO - Received query: What is the status of harbor registry?
2024-12-15 16:37:06,688 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:37:06,688 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"What is the status of harbor registry?\\"\\n        "}]}' message='Post details'
2024-12-15 16:37:08,200 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1228 request_id=req_294b239d66ff2d07e3aa4444e06d149d response_code=200
2024-12-15 16:37:08,200 INFO - GPT-4 Response: Result: {
            "intents": {"pods": false, "namespace": false, "status": true, "deployments": false, "logs": false},
            "keywords": ["status", "harbor registry"]
        }
2024-12-15 16:37:08,200 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:37:08,200 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:37:08,200 INFO - 127.0.0.1 - - [15/Dec/2024 16:37:08] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:37:08,204 INFO - Received query: What is the container port for harbor-core?
2024-12-15 16:37:08,204 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:37:08,204 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"What is the container port for harbor-core?\\"\\n        "}]}' message='Post details'
2024-12-15 16:37:10,724 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2377 request_id=req_844a152a83d7a2bd95ed4f17d7040147 response_code=200
2024-12-15 16:37:10,725 INFO - GPT-4 Response: Result: {
            "intents": {"pods": false, "namespace": false, "status": false, "deployments": true, "logs": false},
            "keywords": ["container port", "harbor-core"]
        }
2024-12-15 16:37:10,725 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:37:10,725 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:37:10,725 INFO - 127.0.0.1 - - [15/Dec/2024 16:37:10] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:37:10,729 INFO - Received query: Which namespace is the harbor service deployed to?
2024-12-15 16:37:10,729 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:37:10,729 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n        Result: {\\n            \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n            \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n        }\\n        Query: \\"Which namespace is the harbor service deployed to?\\"\\n        "}]}' message='Post details'
2024-12-15 16:37:12,687 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1795 request_id=req_b240eed72298fbd7ca4fddd0c46d9fa4 response_code=200
2024-12-15 16:37:12,687 INFO - GPT-4 Response: Result: 
        {
            "intents": {"pods": false, "namespace": true, "status": false, "deployments": true, "logs": false},
            "keywords": ["namespace", "harbor service"]
        }
2024-12-15 16:37:12,687 ERROR - Failed to parse GPT response as JSON: Expecting value: line 1 column 1 (char 0)
2024-12-15 16:37:12,687 ERROR - GPT parsing failed: GPT response was not in valid JSON format.
2024-12-15 16:37:12,687 INFO - 127.0.0.1 - - [15/Dec/2024 16:37:12] "[35m[1mPOST /query HTTP/1.1[0m" 500 -
2024-12-15 16:43:02,663 INFO - KUBECONFIG in use: None (Resolved Path: C:\Users\Sanket Chaudhary\.kube\config)
2024-12-15 16:43:02,663 INFO - Kubernetes configuration initialized successfully.
2024-12-15 16:43:02,744 INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://10.0.0.113:8000
2024-12-15 16:43:02,744 INFO - [33mPress CTRL+C to quit[0m
2024-12-15 16:43:12,466 INFO - Received query: How many pods are in the cluster?
2024-12-15 16:43:12,476 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:12,476 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"How many pods are in the cluster?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:14,542 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1685 request_id=req_02de5ea3d87beca5bfa1dcf5dc5e2b26 response_code=200
2024-12-15 16:43:14,546 INFO - GPT-4 Response: Result: 
{
    "intents": {"pods": true, "namespace": false, "status": false, "deployments": false, "logs": false},
    "keywords": ["pods", "cluster"]
}
2024-12-15 16:43:14,627 DEBUG - response body: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"79365"},"items":[{"metadata":{"name":"apple","namespace":"default","uid":"eb4be5c6-2187-424d-8786-94273caa533f","resourceVersion":"78707","creationTimestamp":"2024-12-07T22:31:36Z","labels":{"app":"app1"},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"app1\"},\"name\":\"apple\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"nginx:1.21.6\",\"name\":\"container1\",\"ports\":[{\"containerPort\":80}]}]}}\n"},"managedFields":[{"manager":"kubectl-client-side-apply","operation":"Update","apiVersion":"v1","time":"2024-12-07T22:31:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:app":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"container1\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":80,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.101\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-hlzcw","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"container1","image":"nginx:1.21.6","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-hlzcw","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:18Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.101","podIPs":[{"ip":"10.244.0.101"}],"startTime":"2024-12-07T22:31:36Z","containerStatuses":[{"name":"container1","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:54Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://9bcb5fca5f368e927214f3e13c041892fb2f9b0158eb4978c44dd682fd820fea"}},"ready":true,"restartCount":17,"image":"nginx:1.21.6","imageID":"docker-pullable://nginx@sha256:2bcabc23b45489fb0885d69a06ba1d648aeda973fae7bb981bafbb884165e514","containerID":"docker://380113a0762e1680fb726489ddfbc8418a3defc77d7075ead227375208149728","started":true,"volumeMounts":[{"name":"kube-api-access-hlzcw","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"bot-deployment-66d64568bb-mc4h2","generateName":"bot-deployment-66d64568bb-","namespace":"default","uid":"e5e47232-9053-4bdd-a573-6ce40d5c0e9a","resourceVersion":"78704","creationTimestamp":"2024-12-08T18:40:48Z","labels":{"app":"bot-deployment","pod-template-hash":"66d64568bb"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"ReplicaSet","name":"bot-deployment-66d64568bb","uid":"f9636762-8a26-4fde-a2fc-fe6cdc0cffc0","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-12-08T18:40:48Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"f9636762-8a26-4fde-a2fc-fe6cdc0cffc0\"}":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"nginx\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.102\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-4nb74","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"nginx","image":"nginx","resources":{},"volumeMounts":[{"name":"kube-api-access-4nb74","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:48Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:48Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.102","podIPs":[{"ip":"10.244.0.102"}],"startTime":"2024-12-08T18:40:48Z","containerStatuses":[{"name":"nginx","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:56Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://9dceb225af0f6e3d5ca8e7cf58a3a44d52fe3f9bbd2111591e6325ef5e5e9977"}},"ready":true,"restartCount":14,"image":"nginx:latest","imageID":"docker-pullable://nginx@sha256:fb197595ebe76b9c0c14ab68159fd3c08bd067ec62300583543f0ebda353b5be","containerID":"docker://77679f2e037dc6e6323f111563b307276fbb0de5b82718e1f7016061eb6981f3","started":true,"volumeMounts":[{"name":"kube-api-access-4nb74","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"orange","namespace":"default","uid":"afec77fc-8ede-4af6-9280-834023f56049","resourceVersion":"78708","creationTimestamp":"2024-12-07T22:31:36Z","labels":{"app":"app2"},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"app2\"},\"name\":\"orange\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"httpd:2.4\",\"name\":\"container2\",\"ports\":[{\"containerPort\":80}]}]}}\n"},"managedFields":[{"manager":"kubectl-client-side-apply","operation":"Update","apiVersion":"v1","time":"2024-12-07T22:31:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:app":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"container2\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":80,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.104\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-jfn99","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"container2","image":"httpd:2.4","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-jfn99","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:18Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.104","podIPs":[{"ip":"10.244.0.104"}],"startTime":"2024-12-07T22:31:36Z","containerStatuses":[{"name":"container2","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:54Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://bfc95a27f876dea32ce7690762659ade911b40957689106a8aa001c04e0903cf"}},"ready":true,"restartCount":17,"image":"httpd:2.4","imageID":"docker-pullable://httpd@sha256:f4c5139eda466e45814122d9bd8b886d8ef6877296126c09b76dbad72b03c336","containerID":"docker://a6ac539602220a14b3ab12376b5b0a8ee51b599aea8ac8406042b1999d86f50e","started":true,"volumeMounts":[{"name":"kube-api-access-jfn99","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"website-deployment-dbc8b97cd-9ndzm","generateName":"website-deployment-dbc8b97cd-","namespace":"default","uid":"bf33556c-4c4b-4ef0-b06b-e2c4589428b4","resourceVersion":"78700","creationTimestamp":"2024-12-08T18:40:56Z","labels":{"app":"website-deployment","pod-template-hash":"dbc8b97cd"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"ReplicaSet","name":"website-deployment-dbc8b97cd","uid":"ad58dc6f-d54a-4fe8-bae3-d43d258b3220","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-12-08T18:40:56Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"ad58dc6f-d54a-4fe8-bae3-d43d258b3220\"}":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"httpd\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.105\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-fdrcz","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"httpd","image":"httpd","resources":{},"volumeMounts":[{"name":"kube-api-access-fdrcz","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:56Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:56Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.105","podIPs":[{"ip":"10.244.0.105"}],"startTime":"2024-12-08T18:40:56Z","containerStatuses":[{"name":"httpd","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:55Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://94fba87a512e590fe631a33ea84cf322ee35223c1b8858d711639019bcf3ec1b"}},"ready":true,"restartCount":14,"image":"httpd:2.4","imageID":"docker-pullable://httpd@sha256:f4c5139eda466e45814122d9bd8b886d8ef6877296126c09b76dbad72b03c336","containerID":"docker://e79937a5c6dc972f75caaef4332a9772009ce55c125571ac68d26e201a2b6b2b","started":true,"volumeMounts":[{"name":"kube-api-access-fdrcz","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}}]}

2024-12-15 16:43:14,673 INFO - Fetched 4 pods from namespace 'default'.
2024-12-15 16:43:14,674 INFO - Generated answer: 4
2024-12-15 16:43:14,675 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:14] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:14,680 INFO - Received query: What is the mount path of the persistent volume for the harbor database?
2024-12-15 16:43:14,681 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:14,681 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"What is the mount path of the persistent volume for the harbor database?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:18,184 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3250 request_id=req_76d270b564453b01f3b8abdc12c5d065 response_code=200
2024-12-15 16:43:18,184 INFO - GPT-4 Response: Result: {
          "intents": {"pods": false, "namespace": false, "status": false, "deployments": false, "logs": false},
          "keywords": ["mount path", "persistent volume", "harbor database"]
      }
2024-12-15 16:43:18,185 INFO - Generated answer: I'm sorry, I couldn't understand your query. Please try rephrasing.
2024-12-15 16:43:18,185 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:18] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:18,188 INFO - Received query: Which pod(s) associate with the harbor database secret
2024-12-15 16:43:18,189 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:18,189 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"Which pod(s) associate with the harbor database secret\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:19,848 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1504 request_id=req_fc5522f7a4a368cab5c0becf81e4ffb0 response_code=200
2024-12-15 16:43:19,848 INFO - GPT-4 Response: Result: {
    "intents": {"pods": true, "namespace": false, "status": false, "deployments": false, "logs": false},
    "keywords": ["pod(s)", "harbor database secret"]
}
2024-12-15 16:43:19,848 INFO - Generated answer: I'm sorry, I couldn't understand your query. Please try rephrasing.
2024-12-15 16:43:19,848 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:19] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:19,852 INFO - Received query: Which port will the harbor redis svc route traffic to?
2024-12-15 16:43:19,852 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:19,852 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"Which port will the harbor redis svc route traffic to?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:21,787 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1676 request_id=req_643021cfd63d9298373e3339f5bb6ca7 response_code=200
2024-12-15 16:43:21,787 INFO - GPT-4 Response: Result: {
          "intents": {"pods": false, "namespace": false, "status": false, "deployments": false, "logs": false},
          "keywords": ["port", "harbor redis svc", "route", "traffic"]
      }
2024-12-15 16:43:21,787 INFO - Generated answer: I'm sorry, I couldn't understand your query. Please try rephrasing.
2024-12-15 16:43:21,788 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:21] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:21,791 INFO - Received query: What is the status of harbor registry?
2024-12-15 16:43:21,791 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:21,791 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"What is the status of harbor registry?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:23,343 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1394 request_id=req_293c09b457144b646c54733e717c8778 response_code=200
2024-12-15 16:43:23,344 INFO - GPT-4 Response: Result: {
    "intents": {"status": true, "pods": false, "namespace": false, "deployments": false, "logs": false},
    "keywords": ["status", "harbor registry"]
}
2024-12-15 16:43:23,355 DEBUG - response body: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"79371"},"items":[{"metadata":{"name":"apple","namespace":"default","uid":"eb4be5c6-2187-424d-8786-94273caa533f","resourceVersion":"78707","creationTimestamp":"2024-12-07T22:31:36Z","labels":{"app":"app1"},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"app1\"},\"name\":\"apple\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"nginx:1.21.6\",\"name\":\"container1\",\"ports\":[{\"containerPort\":80}]}]}}\n"},"managedFields":[{"manager":"kubectl-client-side-apply","operation":"Update","apiVersion":"v1","time":"2024-12-07T22:31:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:app":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"container1\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":80,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.101\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-hlzcw","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"container1","image":"nginx:1.21.6","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-hlzcw","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:18Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.101","podIPs":[{"ip":"10.244.0.101"}],"startTime":"2024-12-07T22:31:36Z","containerStatuses":[{"name":"container1","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:54Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://9bcb5fca5f368e927214f3e13c041892fb2f9b0158eb4978c44dd682fd820fea"}},"ready":true,"restartCount":17,"image":"nginx:1.21.6","imageID":"docker-pullable://nginx@sha256:2bcabc23b45489fb0885d69a06ba1d648aeda973fae7bb981bafbb884165e514","containerID":"docker://380113a0762e1680fb726489ddfbc8418a3defc77d7075ead227375208149728","started":true,"volumeMounts":[{"name":"kube-api-access-hlzcw","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"bot-deployment-66d64568bb-mc4h2","generateName":"bot-deployment-66d64568bb-","namespace":"default","uid":"e5e47232-9053-4bdd-a573-6ce40d5c0e9a","resourceVersion":"78704","creationTimestamp":"2024-12-08T18:40:48Z","labels":{"app":"bot-deployment","pod-template-hash":"66d64568bb"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"ReplicaSet","name":"bot-deployment-66d64568bb","uid":"f9636762-8a26-4fde-a2fc-fe6cdc0cffc0","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-12-08T18:40:48Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"f9636762-8a26-4fde-a2fc-fe6cdc0cffc0\"}":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"nginx\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.102\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-4nb74","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"nginx","image":"nginx","resources":{},"volumeMounts":[{"name":"kube-api-access-4nb74","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:48Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:48Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.102","podIPs":[{"ip":"10.244.0.102"}],"startTime":"2024-12-08T18:40:48Z","containerStatuses":[{"name":"nginx","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:56Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://9dceb225af0f6e3d5ca8e7cf58a3a44d52fe3f9bbd2111591e6325ef5e5e9977"}},"ready":true,"restartCount":14,"image":"nginx:latest","imageID":"docker-pullable://nginx@sha256:fb197595ebe76b9c0c14ab68159fd3c08bd067ec62300583543f0ebda353b5be","containerID":"docker://77679f2e037dc6e6323f111563b307276fbb0de5b82718e1f7016061eb6981f3","started":true,"volumeMounts":[{"name":"kube-api-access-4nb74","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"orange","namespace":"default","uid":"afec77fc-8ede-4af6-9280-834023f56049","resourceVersion":"78708","creationTimestamp":"2024-12-07T22:31:36Z","labels":{"app":"app2"},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"app2\"},\"name\":\"orange\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"httpd:2.4\",\"name\":\"container2\",\"ports\":[{\"containerPort\":80}]}]}}\n"},"managedFields":[{"manager":"kubectl-client-side-apply","operation":"Update","apiVersion":"v1","time":"2024-12-07T22:31:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:app":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"container2\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":80,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.104\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-jfn99","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"container2","image":"httpd:2.4","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-jfn99","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:18Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-07T22:31:36Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.104","podIPs":[{"ip":"10.244.0.104"}],"startTime":"2024-12-07T22:31:36Z","containerStatuses":[{"name":"container2","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:54Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://bfc95a27f876dea32ce7690762659ade911b40957689106a8aa001c04e0903cf"}},"ready":true,"restartCount":17,"image":"httpd:2.4","imageID":"docker-pullable://httpd@sha256:f4c5139eda466e45814122d9bd8b886d8ef6877296126c09b76dbad72b03c336","containerID":"docker://a6ac539602220a14b3ab12376b5b0a8ee51b599aea8ac8406042b1999d86f50e","started":true,"volumeMounts":[{"name":"kube-api-access-jfn99","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}},{"metadata":{"name":"website-deployment-dbc8b97cd-9ndzm","generateName":"website-deployment-dbc8b97cd-","namespace":"default","uid":"bf33556c-4c4b-4ef0-b06b-e2c4589428b4","resourceVersion":"78700","creationTimestamp":"2024-12-08T18:40:56Z","labels":{"app":"website-deployment","pod-template-hash":"dbc8b97cd"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"ReplicaSet","name":"website-deployment-dbc8b97cd","uid":"ad58dc6f-d54a-4fe8-bae3-d43d258b3220","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-12-08T18:40:56Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"ad58dc6f-d54a-4fe8-bae3-d43d258b3220\"}":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"httpd\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-12-15T22:29:19Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.105\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-fdrcz","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"httpd","image":"httpd","resources":{},"volumeMounts":[{"name":"kube-api-access-fdrcz","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"minikube","securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute","tolerationSeconds":300},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute","tolerationSeconds":300}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:56Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-15T22:29:19Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-12-08T18:40:56Z"}],"hostIP":"192.168.49.2","hostIPs":[{"ip":"192.168.49.2"}],"podIP":"10.244.0.105","podIPs":[{"ip":"10.244.0.105"}],"startTime":"2024-12-08T18:40:56Z","containerStatuses":[{"name":"httpd","state":{"running":{"startedAt":"2024-12-15T22:29:18Z"}},"lastState":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-12-15T16:39:55Z","finishedAt":"2024-12-15T18:22:23Z","containerID":"docker://94fba87a512e590fe631a33ea84cf322ee35223c1b8858d711639019bcf3ec1b"}},"ready":true,"restartCount":14,"image":"httpd:2.4","imageID":"docker-pullable://httpd@sha256:f4c5139eda466e45814122d9bd8b886d8ef6877296126c09b76dbad72b03c336","containerID":"docker://e79937a5c6dc972f75caaef4332a9772009ce55c125571ac68d26e201a2b6b2b","started":true,"volumeMounts":[{"name":"kube-api-access-fdrcz","mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","readOnly":true,"recursiveReadOnly":"Disabled"}]}],"qosClass":"BestEffort"}}]}

2024-12-15 16:43:23,366 INFO - Fetched 4 pods from namespace 'default'.
2024-12-15 16:43:23,367 INFO - Generated answer: Pod not found
2024-12-15 16:43:23,368 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:23] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:23,371 INFO - Received query: What is the container port for harbor-core?
2024-12-15 16:43:23,372 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:23,372 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"What is the container port for harbor-core?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:25,863 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2283 request_id=req_d516a07b6e8f23f1afd836974515580b response_code=200
2024-12-15 16:43:25,863 INFO - GPT-4 Response: Result: {
            "intents": {"pods": false, "namespace": false, "status": false, "deployments": false, "logs": false},
            "keywords": ["container port", "harbor-core"]
        }
2024-12-15 16:43:25,863 INFO - Generated answer: I'm sorry, I couldn't understand your query. Please try rephrasing.
2024-12-15 16:43:25,863 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:25] "POST /query HTTP/1.1" 200 -
2024-12-15 16:43:25,867 INFO - Received query: Which namespace is the harbor service deployed to?
2024-12-15 16:43:25,867 DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2024-12-15 16:43:25,867 DEBUG - api_version=None data='{"model": "gpt-4", "messages": [{"role": "user", "content": "\\n        Parse the following query into intents and keywords, handling edge cases like unknown entities. Use this structure:\\n        {\\n            \\"intents\\": {\\n                \\"pods\\": true/false,\\n                \\"namespace\\": true/false,\\n                \\"status\\": true/false,\\n                \\"deployments\\": true/false,\\n                \\"logs\\": true/false\\n            },\\n            \\"keywords\\": [\\"keyword1\\", \\"keyword2\\", ...]\\n        }\\n        Examples:\\n        - Query: \\"How many pods are running in the default namespace?\\"\\n          Result: {\\n              \\"intents\\": {\\"pods\\": true, \\"namespace\\": true, \\"status\\": false, \\"deployments\\": false, \\"logs\\": false},\\n              \\"keywords\\": [\\"pods\\", \\"default namespace\\"]\\n          }\\n        Query: \\"Which namespace is the harbor service deployed to?\\"\\n    "}]}' message='Post details'
2024-12-15 16:43:28,071 DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2047 request_id=req_55704c6ad1b1346fb5482277b53dbc74 response_code=200
2024-12-15 16:43:28,071 INFO - GPT-4 Response: Result: {
    "intents": {"pods": false, "namespace": true, "status": false, "deployments": true, "logs": false},
    "keywords": ["harbor service", "namespace"]
}
2024-12-15 16:43:28,071 INFO - Generated answer: default
2024-12-15 16:43:28,071 INFO - 127.0.0.1 - - [15/Dec/2024 16:43:28] "POST /query HTTP/1.1" 200 -
